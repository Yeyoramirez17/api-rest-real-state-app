security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern: ^/api/auth/login
            stateless: true
            json_login:
                check_path: /api/auth/login # Name Route,  Or URLS
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern: ^/api
            stateless: true
            jwt: ~
        main:
            lazy: true
            provider: app_user_provider

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Auth Controller End-Point
        - { path: ^/api/auth/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/auth/register, roles: PUBLIC_ACCESS }
        - { path: ^/api/auth/confirm-account/[a-zA-Z0-9-]+, roles: PUBLIC_ACCESS }
        # User Controller End-Point
        - { path: ^/api/users, roles: ROLE_ADMIN, methods: [GET] }
        - { path: ^/api/users/[a-zA-Z0-9-]+, roles: ROLE_ADMIN, methods: [GET] }
        - { path: ^/api/users/[a-f0-9\-]+/add-role/[0-9]+$, roles: ROLE_ADMIN, methods: [PATCH, PUT] }
        - { path: ^/api/users/[a-f0-9\-]+/remove-role/[0-9]+$, roles: ROLE_ADMIN, methods: [PATCH, PUT] }
        # Post Controller End-Point
        - { path: ^/api/posts/, roles: [ROLE_WRITE, ROLE_EDITOR], methods: [POST] }
        - { path: ^/api/posts/[a-f0-9\-]+, roles: [ROLE_WRITE, ROLE_EDITOR], methods: [PUT] }
        - { path: ^/api/posts/[a-f0-9\-]+, roles: [ROLE_WRITE, ROLE_EDITOR], methods: [DELETE] }
        - { path: ^/api/posts/[a-f0-9\-]+/publish, roles: [ROLE_WRITE, ROLE_EDITOR], methods: [PATCH] }
        - { path: ^/api/posts/[a-f0-9\-]+/remove-images, roles: [ROLE_WRITE, ROLE_EDITOR], methods: [PATCH] }
        - { path: ^/api/posts/[a-f0-9\-]+/add-images, roles: [ROLE_WRITE, ROLE_EDITOR], methods: [POST] }
        # Comment Controller End-Point
        - { path: ^/api/comments, roles: [ROLE_USER],methods: [POST] }
        # Access Public End-Points
        - { path: ^/api/posts/[a-f0-9\-]+ , roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api/posts, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
